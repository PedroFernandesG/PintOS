Documentação para estudo das funções implementadas para a funcionalidade do Alarm Clock e do Escalonador MLFQS

Henrique Passos 
Pedro Fernandes
Deoclecio Netto
Paulo Vinicius

# Alarm Clock
    
    *void thread_dormir(int64_t ticks, struct thread *thread_atual) 
    /*No cabeçalho da função recebemos ticks, ticks representa o momento que a thread tem que acordar, no timer.c passamos ticks como timer_ticks()(que representa a quantidade de ticks
      desde que o sistema foi inicializado, no timer.c passamos ele) + (int)num, então ele ira acordar quando timer_ticks() = ticks. thread_atual representa a thread que ira dormir*/


    -Codigo-Fonte

            enum intr_level estado_anterior = intr_disable(); 
            /* intr_disable(): Desativa interrupções para garantir que nenhuma interrupção possa ocorrer enquanto a thread é colocada na lista de threads bloqueadas.
                estado_anterior: Guarda o estado das interrupções antes de desativá-las, para que possam ser restauradas posteriormente.*/

               ASSERT(!intr_context());     
               /*Verifica se não esta em um contexto de interrupção, pois pode atrapalhar o escalonamento ou levar a deadlocks*/

            if (thread_atual != idle_thread) 
            {
                /*A idle_thread é uma thread especial que existe apenas para ocupar a CPU quando não há outras threads prontas para execução.
                Seu objetivo é evitar que a CPU fique completamente inativa, mas ela não deve ser considerada uma carga real no sistema.*/

                thread_atual->momento_de_acordar = ticks;
                /*Momento de acordar definido pelo argumento ticks*/

                struct list_elem *elemento; 
                /*Cria uma variavel elemento que guarda um elemento de uma lista*/

                for (elemento = list_begin(&lista_threads_bloqueadas); elemento != list_end(&lista_threads_bloqueadas); elemento = list_next(elemento))
                {
                /*Percorre cada elemento da lista e insere ele na posição correta, ordenando a lista de threads bloqueadas*/

                struct thread *thread_lista = list_entry(elemento, struct thread, elem); 
                /*Pega o elemento da lista e converte numa thread, isso é necessario pois a priori não podemos acessar seus atributos quando ele estar como tipo de list_elem, apenas quando esta thread*/
                if (thread_atual->momento_de_acordar < thread_lista->momento_de_acordar) 
                {
                    /*Se a thread atual tiver o momento de acordar mais proximo,então para manter a lista ordenado, vamo inserir o elemento na lista*/ 
                    list_insert(elemento, &thread_atual->elem);
                    break;
                }
                }
                /*Se ja chegou no elemento final, então signifca que ele ira ficar na ultima posição,
                 pois nenhuma thread tem o tempo de acordar mais distante que o elemento em questão*/
                if (elemento == list_end(&lista_threads_bloqueadas))
                    list_push_back(&lista_threads_bloqueadas, &thread_atual->elem); 
                /*Inserindo no final da lista*/

                thread_block();
                /*thread_block(): Bloqueia a thread, removendo-a da lista de threads prontas para execução e fazendo com que ela só volte a executar quando for explicitamente desbloqueada.
                Isso significa que a CPU nunca mais escolherá essa thread para execução até que outra parte do código a desbloqueie*/
            }

            intr_set_level(estado_anterior); 
            /*intr_set_level(estado_anterior): Restaura o estado das interrupções para o que estava antes da chamada de intr_disable(),
             permitindo que o sistema volte a processar interrupções normalmente*/

    ?Possivel duvida -->Não ha espera ocupada pois:

    *A thread não consome recursos de CPU enquanto espera.
    *Não há loops de verificação contínuos (como na espera ocupada).
    *O sistema pode continuar executando outras threads enquanto aguarda o tempo de reativação da thread bloqueada.
    *Tambem não ha condição de corrida, pois as interrupções foram desabilitadas


    *void thread_acordar(void)
    /*O objetivo dessa função é acordar todas a threads que ja tiverem de acordar, então sera feito uma verificação com um loop pela lista de threads bloqueadas
     caso seja o momento de acordar a thread seja desbloqueada e podera retomar sua execução*/
    
    -Codigo Fonte

            if (list_empty(&lista_threads_bloqueadas))
                return; /*Se a lista ta vazia, logo não ha ninguem para acordar*/

            struct list_elem *thread_atual = list_begin(&lista_threads_bloqueadas);
            /*Guarda o primeiro elemento da lista e guarda em thread_atual*/

            /*Enquanto não chega no final da lista iremos iterar*/
            while (thread_atual != list_end(&lista_threads_bloqueadas))
            {
                struct thread *thread_lista = list_entry(thread_atual, struct thread, elem);
                /*Pega o elemento atual da lista e transforma numa thread, importante para acessar os atributos da thread*/

                if (thread_lista->momento_de_acordar > timer_ticks())
                    break;
                /*
            A função verifica se o tempo de "acordar" da thread já chegou. A variável thread_lista->momento_de_acordar contém o tempo (em ticks) no qual a thread deve ser acordada,
            e timer_ticks() retorna o tempo atual (também em ticks)A lista de threads bloqueadas está ordenada pelo tempo de acordar, então, se a momento_de_acordar da thread atual for maior que o tempo atual,
            isso significa que ainda não é hora de acordá-la,e a função interrompe a iteração com o break. Isso evita que a função continue verificando threads que não devem ser acordadas ainda
                */

                /*Caso tenha passado pelo if, significa que o tempo de acordar ja chegou, logo precisamos tratar a proxima thread
                  e remover da lista de threads bloqueadas a thread atual para ele pode executar novamente*/
                struct list_elem *proxima_thread = list_next(thread_atual);
                list_remove(thread_atual);

                enum intr_level estado_anterior = intr_disable();
                /* intr_disable(): Desativa interrupções para garantir que nenhuma interrupção possa ocorrer enquanto a thread é colocada na lista de threads bloqueadas.
                estado_anterior: Guarda o estado das interrupções antes de desativá-las, para que possam ser restauradas posteriormente.*/

                thread_unblock(thread_lista);/*Desbloqueia a thread para ele voltar para sua execução*/
                intr_set_level(estado_anterior);/*Restaura o estado anterior*/

                thread_atual = proxima_thread; /*Atualiza para verificar a proximas threads da lista garantindo a corretudo do sistema*/
            }
            

# Escalonamento MLFQS

    *void avg_load (void)
    /*Função para calcular o AVG*/

        int tamanho_lista = list_size (&ready_list);  //Tamanho da lista de threas prontas
        if (thread_current () != idle_thread)       
            tamanho_lista++;      
        /*Esta parte é importante, pois quando o sistema não tem threads para executar, ele roda uma thread idle, para manter a CPU ocupada, entretanto a thread_atual que esta executando
          esta pronta, afinal esta executando, mas não consta na lista pois ja foi retirada, mas precisa ser contabilizada, faremos isso se ela for diferente da thread idle do sistema*/
            
        avg = (FLOAT_ADD(FLOAT_MULT(FLOAT_DIV_MIX(INT_TO_FLOAT(59), 60), avg), FLOAT_MULT_MIX(FLOAT_DIV_MIX(INT_TO_FLOAT(1), 60), tamanho_lista)));    
        /*Realiza a computação do AVG*/

    *void thread_set_recent_cpu(void)
    /*Função para calcular o cpu_time de todas as threads*/

    struct list_elem *elemento; /*Uma varivel do tipo elemento da lista*/
    for (elemento = list_begin(&all_list); elemento != list_end(&all_list); elemento = list_next(elemento))
    {
        /*Percorre a lista*/

        struct thread *thread_lista = list_entry(elemento, struct thread, elem);
        /*Transforma o elemento em uma thread para acessar seus atributos*/
        thread_lista->cpu_time = FLOAT_ADD(FLOAT_MULT_MIX(FLOAT_DIV_MIX(FLOAT_MULT_MIX(2, avg), FLOAT_ADD(FLOAT_MULT_MIX(2, avg), 1)), thread_lista->cpu_time), thread_lista->nice);
        /*Faz a computação de forma direita usando a equação do cpu_time para cada thread
    }

    *int nova_Prioridade(void)
    /*Função que calcula a prioridade da thread atual e verifica se esta dentros dos limites imposto pelas macros do sistema*/

        int nova_prioridade = FLOAT_INT_PART(FLOAT_SUB(FLOAT_SUB(PRI_MAX, FLOAT_DIV_MIX(thread_get_recent_cpu(), 4)), FLOAT_MULT_MIX(thread_get_nice(), 2)));
        //Verifica se a prioridade esta dentro dos limites e corrige
        if (nova_prioridade > PRI_MAX)
            nova_prioridade = PRI_MAX;
        else if (nova_prioridade < PRI_MIN)
            nova_prioridade = PRI_MIN;

        return nova_Prioridade;
    *void thread_set_nice(int nice UNUSED)
    /*Função padrão do sistema que configua o nice para a thread atual do sistema*/

        /*Guarda thread atual em uma variavel e atualiza o atributo nice da thread*/
        struct thread *t = thread_current();
        t->nice = nice;
        
        /*Calcula a nova prioridade da thread que depende do nice*/
        int thread_atual_prioridade = nova_Prioridade();
        
        /*Garante que a thread atual seja preemptivamente "destruída" (ou seja, perca a CPU) se houver uma thread com prioridade mais alta pronta para ser executada.
         Isso implementa um comportamento de prioridade dinâmica no escalonador de threads*/
        if (!list_empty(&ready_list) && t->priority < list_entry(list_front(&ready_list), struct thread, elem)->priority)
            thread_yield();


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--Codigo Atual (Ignorar)

#include "threads/thread.h"
#include <debug.h>
#include <stddef.h>
#include <random.h>
#include <stdio.h>
#include <string.h>
#include "threads/flags.h"
#include "threads/interrupt.h"
#include "threads/intr-stubs.h"
#include "threads/palloc.h"
#include "threads/switch.h"
#include "threads/synch.h"
#include "threads/vaddr.h"
#include "threads/float.h"
#include "devices/timer.h"

#ifdef USERPROG
#include "userprog/process.h"
#endif

/* Random value for struct thread's `magic' member.
   Used to detect stack overflow.  See the big comment at the top
   of thread.h for details. */
#define THREAD_MAGIC 0xcd6abf4b

/* List of processes in THREAD_READY state, that is, processes
   that are ready to run but not actually running. */
static struct list ready_list;

/* List of all processes.  Processes are added to this list
   when they are first scheduled and removed when they exit. */
static struct list all_list;

/*Lista de todas as threads bloqueadas*/
static struct list lista_threads_bloqueadas;

/* Idle thread. */
static struct thread *idle_thread;

/* Initial thread, the thread running init.c:main(). */
static struct thread *initial_thread;
/* Lock used by allocate_tid(). */
static struct lock tid_lock;

/* Stack frame for kernel_thread(). */
struct kernel_thread_frame
{
  void *eip;             /* Return address. */
  thread_func *function; /* Function to call. */
  void *aux;             /* Auxiliary data for function. */
};

/* Statistics. */
static long long idle_ticks;   /* # of timer ticks spent idle. */
static long long kernel_ticks; /* # of timer ticks in kernel threads. */
static long long user_ticks;   /* # of timer ticks in user programs. */

/* Scheduling. */
#define TIME_SLICE 4          /* # of timer ticks to give each thread. */
#define TIMER_FREQ 100        /* # Quantidade de ticks em um segundo*/
static unsigned thread_ticks; /* # of timer ticks since last yield. */

/* If false (default), use round-robin scheduler.
   If true, use multi-level feedback queue scheduler.
   Controlled by kernel command-line option "-o mlfqs". */
bool thread_mlfqs;

int avg; /*Variavel global para guardar o valor de AVG*/

static void kernel_thread(thread_func *, void *aux);

static void idle(void *aux UNUSED);
static struct thread *running_thread(void);
static struct thread *next_thread_to_run(void);
static void init_thread(struct thread *, const char *name, int priority);
static bool is_thread(struct thread *) UNUSED;
static void *alloc_frame(struct thread *, size_t size);
static void schedule(void);
void thread_schedule_tail(struct thread *prev);
static tid_t allocate_tid(void);

/* Initializes the threading system by transforming the code
   that's currently running into a thread.  This can't work in
   general and it is possible in this case only because loader.S
   was careful to put the bottom of the stack at a page boundary.

   Also initializes the run queue and the tid lock.

   After calling this function, be sure to initialize the page
   allocator before trying to create any threads with
   thread_create().

   It is not safe to call thread_current() until this function
   finishes. */
void thread_init(void)
{
  ASSERT(intr_get_level() == INTR_OFF);

  list_init(&lista_threads_bloqueadas); //Inicializa a lista de threads bloqueadas
  lock_init(&tid_lock);
  list_init(&ready_list);
  list_init(&all_list);

  /* Set up a thread structure for the running thread. */
  initial_thread = running_thread();
  init_thread(initial_thread, "main", PRI_DEFAULT);
  initial_thread->status = THREAD_RUNNING;
  initial_thread->tid = allocate_tid();
  initial_thread->nice = 0;
  initial_thread->cpu_time = 0;
}
/* Starts preemptive thread scheduling by enabling interrupts.
   Also creates the idle thread. */
void thread_start(void)
{
  /* Create the idle thread. */
  struct semaphore idle_started;
  sema_init(&idle_started, 0);
  thread_create("idle", PRI_MIN, idle, &idle_started);

  /* Start preemptive thread scheduling. */
  intr_enable();

  /* Wait for the idle thread to initialize idle_thread. */
  sema_down(&idle_started);
}
/* Called by the timer interrupt handler at each timer tick.
   Thus, this function runs in an external interrupt context. */
void thread_tick(void)
{
  struct thread *t = thread_current();

  /* Update statistics. */
  if (t == idle_thread)
    idle_ticks++;
#ifdef USERPROG
  else if (t->pagedir != NULL)
    user_ticks++;
#endif
  else
    kernel_ticks++;

  /*Essa parte verifica se o sistema de escalonamento de threads está utilizando o MLFQS (Escalonador Multinível com Fila de Feedback),
   que é um tipo de escalonador baseado em prioridades dinâmicas, para garantir a corretude do programa é necessario tal verificação*/

  if(thread_mlfqs){

    if(t != idle_thread) t->cpu_time = FLOAT_ADD_MIX(t->cpu_time,1);
    /*Aqui, se a thread atual (t) não for a idle thread (a thread que fica em execução quando não há outras threads prontas), o tempo de CPU dessa thread é atualizado.*/

    /*TIMER_FREQ é uma constante que define a frequência do timer (provavelmente em ticks por segundo). 
    A linha verifica se o número de ticks é múltiplo de TIMER_FREQ, ou seja, ela verifica se chegou a um ponto em que deve ser realizada uma ação periódica
    No caso devemos atualizar o tempo de CPU e o valor numerico do AVG a cada 100 Ticks*/
    if (timer_ticks() % TIMER_FREQ == 0){
      avg_load();

    }
  }   
  /* Enforce preemption. */
  if (++thread_ticks >= TIME_SLICE)
    intr_yield_on_return();
}
/* Prints thread statistics. */
void thread_print_stats(void)
{
  printf("Thread: %lld idle ticks, %lld kernel ticks, %lld user ticks\n",
         idle_ticks, kernel_ticks, user_ticks);
}
/* Creates a new kernel thread named NAME with the given initial
   PRIORITY, which executes FUNCTION passing AUX as the argument,
   and adds it to the ready queue.  Returns the thread identifier
   for the new thread, or TID_ERROR if creation fails.

   If thread_start() has been called, then the new thread may be
   scheduled before thread_create() returns.  It could even exit
   before thread_create() returns.  Contrariwise, the original
   thread may run for any amount of time before the new thread is
   scheduled.  Use a semaphore or some other form of
   synchronization if you need to ensure ordering.

   The code provided sets the new thread's `priority' member to
   PRIORITY, but no actual priority scheduling is implemented.
   Priority scheduling is the goal of Problem 1-3. */
tid_t thread_create(const char *name, int priority,
                    thread_func *function, void *aux)
{
  struct thread *t;
  struct kernel_thread_frame *kf;
  struct switch_entry_frame *ef;
  struct switch_threads_frame *sf;
  tid_t tid;

  ASSERT(function != NULL);

  /* Allocate thread. */
  t = palloc_get_page(PAL_ZERO);
  if (t == NULL)
    return TID_ERROR;

  /* Initialize thread. */
  init_thread(t, name, priority);
  tid = t->tid = allocate_tid();

  /* Stack frame for kernel_thread(). */
  kf = alloc_frame(t, sizeof *kf);
  kf->eip = NULL;
  kf->function = function;
  kf->aux = aux;

  /* Stack frame for switch_entry(). */
  ef = alloc_frame(t, sizeof *ef);
  ef->eip = (void (*)(void))kernel_thread;

  /* Stack frame for switch_threads(). */
  sf = alloc_frame(t, sizeof *sf);
  sf->eip = switch_entry;
  sf->ebp = 0;

  /* Add to run queue. */
  thread_unblock(t);

  //Garante que a thread atual seja preemptivamente "destruída" (ou seja, perca a CPU) se houver uma thread com prioridade mais alta pronta para ser executada.
  if (!list_empty(&ready_list) && t->priority < list_entry(list_front(&ready_list), struct thread, elem)->priority)
    thread_yield();

  return tid;
}

/* Puts the current thread to sleep.  It will not be scheduled
   again until awoken by thread_unblock().

   This function must be called with interrupts turned off.  It
   is usually a better idea to use one of the synchronization
   primitives in synch.h. */
void thread_block(void)
{
  ASSERT(!intr_context());
  ASSERT(intr_get_level() == INTR_OFF);

  thread_current()->status = THREAD_BLOCKED;
  schedule();
}

/* Transitions a blocked thread T to the ready-to-run state.
   This is an error if T is not blocked.  (Use thread_yield() to
   make the running thread ready.)

   This function does not preempt the running thread.  This can
   be important: if the caller had disabled interrupts itself,
   it may expect that it can atomically unblock a thread and
   update other data. */
void thread_unblock(struct thread *t)
{
  enum intr_level old_level;

  ASSERT(is_thread(t));

  old_level = intr_disable();
  ASSERT(t->status == THREAD_BLOCKED);
  list_push_back(&ready_list, &t->elem);
  t->status = THREAD_READY;
  intr_set_level(old_level);
}

/* Returns the name of the running thread. */
const char *
thread_name(void)
{
  return thread_current()->name;
}

/* Returns the running thread.
   This is running_thread() plus a couple of sanity checks.
   See the big comment at the top of thread.h for details. */
struct thread *
thread_current(void)
{
  struct thread *t = running_thread();

  /* Make sure T is really a thread.
     If either of these assertions fire, then your thread may
     have overflowed its stack.  Each thread has less than 4 kB
     of stack, so a few big automatic arrays or moderate
     recursion can cause stack overflow. */
  ASSERT(is_thread(t));
  ASSERT(t->status == THREAD_RUNNING);

  return t;
}

/* Returns the running thread's tid. */
tid_t thread_tid(void)
{
  return thread_current()->tid;
}

/* Deschedules the current thread and destroys it.  Never
   returns to the caller. */
void thread_exit(void)
{
  ASSERT(!intr_context());

#ifdef USERPROG
  process_exit();
#endif

  /* Remove thread from all threads list, set our status to dying,
     and schedule another process.  That process will destroy us
     when it calls thread_schedule_tail(). */
  intr_disable();
  list_remove(&thread_current()->allelem);
  thread_current()->status = THREAD_DYING;
  schedule();
  NOT_REACHED();
}

/* Yields the CPU.  The current thread is not put to sleep and
   may be scheduled again immediately at the scheduler's whim. */
void thread_yield(void)
{
  struct thread *cur = thread_current();
  enum intr_level old_level;

  ASSERT(!intr_context());

  old_level = intr_disable();
  list_push_back(&ready_list, &cur->elem);
  cur->status = THREAD_READY;
  schedule();
  intr_set_level(old_level);
}

/* Invoke function 'func' on all threads, passing along 'aux'.
   This function must be called with interrupts off. */
void thread_foreach(thread_action_func *func, void *aux)
{
  struct list_elem *e;

  ASSERT(intr_get_level() == INTR_OFF);

  for (e = list_begin(&all_list); e != list_end(&all_list);
       e = list_next(e))
  {
    struct thread *t = list_entry(e, struct thread, allelem);
    func(t, aux);
  }
}
/*

void thread_set_priority(int new_priority)
{
  struct list_elem *elemento; // Indica o elemento atual
  // Calcula a prioridade para todos
  for (elemento = list_begin(&all_list); elemento != list_end(&all_list); elemento = list_next(elemento))
  {
    struct thread *thread_lista = list_entry(elemento, struct thread, elem);                                                                       // Pega o elemento da lista e converte numa thread
    //new_priority = FLOAT_INT_PART(FLOAT_SUB(FLOAT_SUB(PRI_MAX, FLOAT_DIV_MIX(thread_lista->cpu_time, 4)), FLOAT_MULT_MIX(thread_lista->nice, 2))); // Calcuala a prioriade para cada thread
    thread_lista->priority = new_priority;
    if (thread_lista->priority > PRI_MAX)
      thread_lista->priority = PRI_MAX;
    if (thread_lista->priority > PRI_MIN)
      thread_lista->priority = PRI_MIN;
  }
  // new_priority = nova_Prioridade(); // Atualiza a prioridade da thread
  // thread_current ()->priority = new_priority;
}
*/

/* Sets the current thread's priority to NEW_PRIORITY. */
void thread_set_priority(int new_priority){
  thread_current ()->priority = new_priority;
}
/* Returns the current thread's priority. */
int thread_get_priority(void)
{
  return thread_current()->priority;
}

/* Sets the current thread's nice value to NICE. */
void thread_set_nice(int nice UNUSED)
{
  struct thread *t = thread_current();
  t->nice = nice;//Atribuicao do nice
  
  t->priority = nova_Prioridade();//Nova prioridade da thread atual
  //Garante que a thread atual seja preemptivamente "destruída" (ou seja, perca a CPU) se houver uma thread com prioridade mais alta pronta para ser executada.
  if (!list_empty(&ready_list) && t->priority < list_entry(list_front(&ready_list), struct thread, elem)->priority)
    thread_yield();
}

/* Returns the current thread's nice value. */
int thread_get_nice(void)
{
  return thread_current()->nice;
}

/* Returns 100 times the system load average. */
int thread_get_load_avg(void)
{
  return FLOAT_ROUND(avg)*100;
}

void thread_set_recent_cpu(void){

  struct list_elem *elemento; /*Uma varivel do tipo elemento da lista*/
  for (elemento = list_begin(&all_list); elemento != list_end(&all_list); elemento = list_next(elemento)){

      struct thread *thread_lista = list_entry(elemento, struct thread, elem);
      //Transforma o elemento em uma thread para acessar seus atributos
      thread_lista->cpu_time = FLOAT_ADD(FLOAT_MULT_MIX(FLOAT_DIV_MIX(FLOAT_MULT_MIX(2, avg), FLOAT_ADD(FLOAT_MULT_MIX(2, avg), 1)), thread_lista->cpu_time), thread_lista->nice);
      //Faz a computação de forma direita usando a equação do cpu_time para cada thread
  }
}

/* Returns 100 times the current thread's recent_cpu value. */
int thread_get_recent_cpu(void)
{
  return FLOAT_INT_PART(FLOAT_MULT_MIX(thread_current()->cpu_time, 100)); 

} 
/* Idle thread.  Executes when no other thread is ready to run.

   The idle thread is initially put on the ready list by
   thread_start().  It will be scheduled once initially, at which
   point it initializes idle_thread, "up"s the semaphore passed
   to it to enable thread_start() to continue, and immediately
   blocks.  After that, the idle thread never appears in the
   ready list.  It is returned by next_thread_to_run() as a
   special case when the ready list is empty. */
static void
idle(void *idle_started_ UNUSED)
{
  struct semaphore *idle_started = idle_started_;
  idle_thread = thread_current();
  sema_up(idle_started);

  for (;;)
  {
    /* Let someone else run. */
    intr_disable();
    thread_block();

    /* Re-enable interrupts and wait for the next one.

       The `sti' instruction disables interrupts until the
       completion of the next instruction, so these two
       instructions are executed atomically.  This atomicity is
       important; otherwise, an interrupt could be handled
       between re-enabling interrupts and waiting for the next
       one to occur, wasting as much as one clock tick worth of
       time.

       See [IA32-v2a] "HLT", [IA32-v2b] "STI", and [IA32-v3a]
       7.11.1 "HLT Instruction". */
    asm volatile("sti; hlt" : : : "memory");
  }
}

/* Function used as the basis for a kernel thread. */
static void
kernel_thread(thread_func *function, void *aux)
{
  ASSERT(function != NULL);

  intr_enable(); /* The scheduler runs with interrupts off. */
  function(aux); /* Execute the thread function. */
  thread_exit(); /* If function() returns, kill the thread. */
}

/* Returns the running thread. */
struct thread *
running_thread(void)
{
  uint32_t *esp;

  /* Copy the CPU's stack pointer into `esp', and then round that
     down to the start of a page.  Because `struct thread' is
     always at the beginning of a page and the stack pointer is
     somewhere in the middle, this locates the curent thread. */
  asm("mov %%esp, %0" : "=g"(esp));
  return pg_round_down(esp);
}

/* Returns true if T appears to point to a valid thread. */
static bool
is_thread(struct thread *t)
{
  return t != NULL && t->magic == THREAD_MAGIC;
}

/* Does basic initialization of T as a blocked thread named
   NAME. */
static void
init_thread(struct thread *t, const char *name, int priority)
{
  enum intr_level old_level;

  ASSERT(t != NULL);
  ASSERT(PRI_MIN <= priority && priority <= PRI_MAX);
  ASSERT(name != NULL);

  memset(t, 0, sizeof *t);
  t->status = THREAD_BLOCKED;
  strlcpy(t->name, name, sizeof t->name);
  t->stack = (uint8_t *)t + PGSIZE;
  t->priority = priority;
  t->magic = THREAD_MAGIC;
  t->cpu_time = 0;
  t->nice = 0;

  old_level = intr_disable();
  list_push_back(&all_list, &t->allelem);
  intr_set_level(old_level);
}

/* Allocates a SIZE-byte frame at the top of thread T's stack and
   returns a pointer to the frame's base. */
static void *
alloc_frame(struct thread *t, size_t size)
{
  /* Stack data is always allocated in word-size units. */
  ASSERT(is_thread(t));
  ASSERT(size % sizeof(uint32_t) == 0);

  t->stack -= size;
  return t->stack;
}

/* Chooses and returns the next thread to be scheduled.  Should
   return a thread from the run queue, unless the run queue is
   empty.  (If the running thread can continue running, then it
   will be in the run queue.)  If the run queue is empty, return
   idle_thread. */
static struct thread *
next_thread_to_run(void)
{
  if (list_empty(&ready_list))
    return idle_thread;
  else
    return list_entry(list_pop_front(&ready_list), struct thread, elem);
}

/* Completes a thread switch by activating the new thread's page
   tables, and, if the previous thread is dying, destroying it.

   At this function's invocation, we just switched from thread
   PREV, the new thread is already running, and interrupts are
   still disabled.  This function is normally invoked by
   thread_schedule() as its final action before returning, but
   the first time a thread is scheduled it is called by
   switch_entry() (see switch.S).

   It's not safe to call printf() until the thread switch is
   complete.  In practice that means that printf()s should be
   added at the end of the function.

   After this function and its caller returns, the thread switch
   is complete. */
void thread_schedule_tail(struct thread *prev)
{
  struct thread *cur = running_thread();

  ASSERT(intr_get_level() == INTR_OFF);

  /* Mark us as running. */
  cur->status = THREAD_RUNNING;

  /* Start new time slice. */
  thread_ticks = 0;

#ifdef USERPROG
  /* Activate the new address space. */
  process_activate();
#endif

  /* If the thread we switched from is dying, destroy its struct
     thread.  This must happen late so that thread_exit() doesn't
     pull out the rug under itself.  (We don't free
     initial_thread because its memory was not obtained via
     palloc().) */
  if (prev != NULL && prev->status == THREAD_DYING && prev != initial_thread)
  {
    ASSERT(prev != cur);
    palloc_free_page(prev);
  }
}

/* Schedules a new process.  At entry, interrupts must be off and
   the running process's state must have been changed from
   running to some other state.  This function finds another
   thread to run and switches to it.

   It's not safe to call printf() until thread_schedule_tail()
   has completed. */
static void
schedule(void)
{
  struct thread *cur = running_thread();
  struct thread *next = next_thread_to_run();
  struct thread *prev = NULL;

  ASSERT(intr_get_level() == INTR_OFF);
  ASSERT(cur->status != THREAD_RUNNING);
  ASSERT(is_thread(next));

  if (cur != next)
  {
    prev = switch_threads(cur, next);
  }
  thread_schedule_tail(prev);
}

/* Returns a tid to use for a new thread. */
static tid_t
allocate_tid(void)
{
  static tid_t next_tid = 1;
  tid_t tid;

  lock_acquire(&tid_lock);
  tid = next_tid++;
  lock_release(&tid_lock);

  return tid;
}

/* Offset of `stack' member within `struct thread'.
   Used by switch.S, which can't figure it out on its own. */
uint32_t thread_stack_ofs = offsetof(struct thread, stack);

void thread_dormir(int64_t ticks, struct thread *thread_atual)
{

  enum intr_level estado_anterior = intr_disable(); // Desabilito as interrupções e guardo numa variavel
  ASSERT(!intr_context());                          // Verifica se não esta em um contexto de interrupção

  if (thread_atual != idle_thread)
  {
    /*A idle_thread é uma thread especial que existe apenas para ocupar a CPU quando não há outras threads prontas para execução.
    Seu objetivo é evitar que a CPU fique completamente inativa, mas ela não deve ser considerada uma carga real no sistema.*/
    thread_atual->momento_de_acordar = ticks; // Define o tempo de acordar como ticks que foi passado como argumento

    struct list_elem *elemento; // Cria uma variavel elemento que guarda um elemento de uma lista
    for (elemento = list_begin(&lista_threads_bloqueadas); elemento != list_end(&lista_threads_bloqueadas); elemento = list_next(elemento))
    {
      /*Percorre cada elemento da lista e insere ele no tempo correto de acordar*/
      struct thread *thread_lista = list_entry(elemento, struct thread, elem); /*Pega o elemento da lista e converte numa thread*/
      if (thread_atual->momento_de_acordar < thread_lista->momento_de_acordar)
      {
        /*Se o momento de acordar da thread atual for menor que o que esta sendo verificado na lista , então insere ele na lista*/
        list_insert(elemento, &thread_atual->elem);
        break;
      }
    }
    // Se ja chegou no elemento final, então signifca que ele ira ficar na ultima posição,pois não ha ninguem com tempo de acordar mais longo que o do elemento
    if (elemento == list_end(&lista_threads_bloqueadas))
      list_push_back(&lista_threads_bloqueadas, &thread_atual->elem); // Insere na lista

    thread_block(); // Bloqueia a thread
  }

  intr_set_level(estado_anterior); // Volta para o estado anterior antes da interrupção
}

void thread_acordar(void)
{
  if (list_empty(&lista_threads_bloqueadas))
    return; /*Se a lista ta vazia então*/

  struct list_elem *thread_atual = list_begin(&lista_threads_bloqueadas);
  /*Pega o elemento atual da lista e guarda em thread atual*/

  /*Enquanto não chega no final da lista*/
  while (thread_atual != list_end(&lista_threads_bloqueadas))
  {
    struct thread *thread_lista = list_entry(thread_atual, struct thread, elem);
    /*Pega o elemento atual da lista e transforma numa thread*/

    /*e ainda não chegou a hora de acordar essa thread, saímos do loop (break),porque a lista
    está ordenada em relação ao tempo de acordar (threads que devem acordar primeiro vem antes na lista).*/
    if (thread_lista->momento_de_acordar > timer_ticks())
      break;

    /*Caso tenha passado pelo if, então guardamos a proxima thread em proxima e a thread atual nos ha removemos da lista*/
    struct list_elem *proxima_thread = list_next(thread_atual);
    list_remove(thread_atual);

    enum intr_level estado_anterior = intr_disable(); // Desabilita as interrupções
    thread_unblock(thread_lista);                     // Desbloqueia a thread
    intr_set_level(estado_anterior);                  // Restaura o estado anterior

    thread_atual = proxima_thread; // Atualiza para tratar a proxima thread
  }
}
void avg_load (void){
  int tamanho_lista = list_size (&ready_list);  //Tamanho da lista de threas prontas
  if (thread_current () != idle_thread)        //Verifica se a thread atual é diferente da idle_thread.
      tamanho_lista++;      
     
  avg = FLOAT_ADD(FLOAT_MULT(FLOAT_DIV_MIX(FLOAT_CONST(59), 60), avg), FLOAT_MULT_MIX(FLOAT_DIV_MIX(FLOAT_CONST(1), 60), tamanho_lista));  
  //Realiza a computação do AVG
}

//Funcao para retornar a nova prioridade da thread atual
int nova_Prioridade(void)
{
  int nova_prioridade = FLOAT_INT_PART(FLOAT_SUB(FLOAT_SUB(PRI_MAX, FLOAT_DIV_MIX(thread_get_recent_cpu(), 4)), FLOAT_MULT_MIX(thread_get_nice(), 2)));
  //Verifica se a prioridade esta dentro dos limites e corrige
  if (nova_prioridade > PRI_MAX)
    nova_prioridade = PRI_MAX;
  else if (nova_prioridade < PRI_MIN)
    nova_prioridade = PRI_MIN;

  return nova_Prioridade;
}




#include "threads/thread.h"
#include <debug.h>
#include <stddef.h>
#include <random.h>
#include <stdio.h>
#include <string.h>
#include "threads/flags.h"
#include "threads/interrupt.h"
#include "threads/intr-stubs.h"
#include "threads/palloc.h"
#include "threads/switch.h"
#include "threads/synch.h"
#include "threads/vaddr.h"
#include "threads/float.h"
#include "devices/timer.h"
#ifdef USERPROG
#include "userprog/process.h"
#endif


/*Lista de todas as threads bloqueadas*/
static struct list lista_threads_bloqueadas;

/* Random value for struct thread's `magic' member.
   Used to detect stack overflow.  See the big comment at the top
   of thread.h for details. */
#define THREAD_MAGIC 0xcd6abf4b

/* List of processes in THREAD_READY state, that is, processes
   that are ready to run but not actually running. */
static struct list ready_list;

/* List of all processes.  Processes are added to this list
   when they are first scheduled and removed when they exit. */
static struct list all_list;

/* Idle thread. */
static struct thread *idle_thread;

/* Initial thread, the thread running init.c:main(). */
static struct thread *initial_thread;

/* Lock used by allocate_tid(). */
static struct lock tid_lock;

/* Stack frame for kernel_thread(). */
struct kernel_thread_frame
{
  void *eip;             /* Return address. */
  thread_func *function; /* Function to call. */
  void *aux;             /* Auxiliary data for function. */
};

/* Statistics. */
static long long idle_ticks;   /* # of timer ticks spent idle. */
static long long kernel_ticks; /* # of timer ticks in kernel threads. */
static long long user_ticks;   /* # of timer ticks in user programs. */

/* Scheduling. */
#define TIME_SLICE 4          /* # of timer ticks to give each thread. */
#define TIMER_FREQ 100        /* # Quantidade de ticks em um segundo*/
static unsigned thread_ticks; /* # of timer ticks since last yield. */
int avg;                      /*Variavel global para guardar o valor de AVG*/

/* If false (default), use round-robin scheduler.
   If true, use multi-level feedback queue scheduler.
   Controlled by kernel command-line option "-o mlfqs". */
bool thread_mlfqs;

static void kernel_thread(thread_func *, void *aux);

static void idle(void *aux UNUSED);
static struct thread *running_thread(void);
static struct thread *next_thread_to_run(void);
static void init_thread(struct thread *, const char *name, int priority);
static bool is_thread(struct thread *) UNUSED;
static void *alloc_frame(struct thread *, size_t size);
static void schedule(void);
void thread_schedule_tail(struct thread *prev);
static tid_t allocate_tid(void);

/* Initializes the threading system by transforming the code
   that's currently running into a thread.  This can't work in
   general and it is possible in this case only because loader.S
   was careful to put the bottom of the stack at a page boundary.

   Also initializes the run queue and the tid lock.

   After calling this function, be sure to initialize the page
   allocator before trying to create any threads with
   thread_create().

   It is not safe to call thread_current() until this function
   finishes. */
void thread_init(void)
{
  ASSERT(intr_get_level() == INTR_OFF);

  list_init(&lista_threads_bloqueadas); // Inicializa a lista de threads bloqueadas
  lock_init(&tid_lock);
  list_init(&ready_list);
  list_init(&all_list);

  /* Set up a thread structure for the running thread. */
  initial_thread = running_thread();
  init_thread(initial_thread, "main", PRI_DEFAULT);
  initial_thread->nice = 0;
  initial_thread->cpu_time = 0;
  initial_thread->status = THREAD_RUNNING;
  initial_thread->tid = allocate_tid();
}
/* Starts preemptive thread scheduling by enabling interrupts.
   Also creates the idle thread. */
void thread_start(void)
{
  /* Create the idle thread. */
  struct semaphore idle_started;
  sema_init(&idle_started, 0);
  thread_create("idle", PRI_MIN, idle, &idle_started);

  avg = 0;

  /* Start preemptive thread scheduling. */
  intr_enable();

  /* Wait for the idle thread to initialize idle_thread. */
  sema_down(&idle_started);
}
/* Called by the timer interrupt handler at each timer tick.
   Thus, this function runs in an external interrupt context. */
void thread_tick(void)
{
  struct thread *t = thread_current();

  /* Update statistics. */
  if (t == idle_thread)
    idle_ticks++;
#ifdef USERPROG
  else if (t->pagedir != NULL)
    user_ticks++;
#endif
  else
    kernel_ticks++;

  /*Essa parte verifica se o sistema de escalonamento de threads está utilizando o MLFQS (Escalonador Multinível com Fila de Feedback),
   que é um tipo de escalonador baseado em prioridades dinâmicas, para garantir a corretude do programa é necessario tal verificação*/

  if (thread_mlfqs)
  {

    if (t != idle_thread)
      t->cpu_time = FLOAT_ADD_MIX(t->cpu_time, 1); //(float + int)

    /*Aqui, se a thread atual (t) não for a idle thread (a thread que fica em execução quando não há outras threads prontas), o tempo de CPU dessa thread é atualizado.*/

    /*TIMER_FREQ é uma constante que define a frequência do timer (provavelmente em ticks por segundo).
    A linha verifica se o número de ticks é múltiplo de TIMER_FREQ, ou seja, ela verifica se chegou a um ponto em que deve ser realizada uma ação periódica
    No caso devemos atualizar o tempo de CPU e o valor numerico do AVG a cada 100 Ticks*/
    if (timer_ticks() % TIMER_FREQ == 0)
    {
      avg_load();
      thread_set_recent_cpu();
    }

    if(timer_ticks() % TIME_SLICE == 0)set_priority();
  }

  /* Enforce preemption. */
  if (++thread_ticks >= TIME_SLICE)
    intr_yield_on_return();
}
/* Prints thread statistics. */
void thread_print_stats(void)
{
  printf("Thread: %lld idle ticks, %lld kernel ticks, %lld user ticks\n",
         idle_ticks, kernel_ticks, user_ticks);
}
/* Creates a new kernel thread named NAME with the given initial
   PRIORITY, which executes FUNCTION passing AUX as the argument,
   and adds it to the ready queue.  Returns the thread identifier
   for the new thread, or TID_ERROR if creation fails.

   If thread_start() has been called, then the new thread may be
   scheduled before thread_create() returns.  It could even exit
   before thread_create() returns.  Contrariwise, the original
   thread may run for any amount of time before the new thread is
   scheduled.  Use a semaphore or some other form of
   synchronization if you need to ensure ordering.

   The code provided sets the new thread's `priority' member to
   PRIORITY, but no actual priority scheduling is implemented.
   Priority scheduling is the goal of Problem 1-3. */
tid_t thread_create(const char *name, int priority,
                    thread_func *function, void *aux)
{
  struct thread *t;
  struct kernel_thread_frame *kf;
  struct switch_entry_frame *ef;
  struct switch_threads_frame *sf;
  tid_t tid;

  ASSERT(function != NULL);

  /* Allocate thread. */
  t = palloc_get_page(PAL_ZERO);
  if (t == NULL)
    return TID_ERROR;

  /* Initialize thread. */
  init_thread(t, name, priority);
  tid = t->tid = allocate_tid();

  /* Stack frame for kernel_thread(). */
  kf = alloc_frame(t, sizeof *kf);
  kf->eip = NULL;
  kf->function = function;
  kf->aux = aux;

  /* Stack frame for switch_entry(). */
  ef = alloc_frame(t, sizeof *ef);
  ef->eip = (void (*)(void))kernel_thread;

  /* Stack frame for switch_threads(). */
  sf = alloc_frame(t, sizeof *sf);
  sf->eip = switch_entry;
  sf->ebp = 0;

  /* Add to run queue. */
  thread_unblock(t);

  // Garante que a thread atual seja preemptivamente "destruída" (ou seja, perca a CPU) se houver uma thread com prioridade mais alta pronta para ser executada.
  if (!list_empty(&ready_list) && t->priority < list_entry(list_front(&ready_list), struct thread, elem)->priority)
    thread_yield();

  return tid;
}

/* Puts the current thread to sleep.  It will not be scheduled
   again until awoken by thread_unblock().

   This function must be called with interrupts turned off.  It
   is usually a better idea to use one of the synchronization
   primitives in synch.h. */
void thread_block(void)
{
  ASSERT(!intr_context());
  ASSERT(intr_get_level() == INTR_OFF);

  thread_current()->status = THREAD_BLOCKED;
  schedule();
}

/* Transitions a blocked thread T to the ready-to-run state.
   This is an error if T is not blocked.  (Use thread_yield() to
   make the running thread ready.)

   This function does not preempt the running thread.  This can
   be important: if the caller had disabled interrupts itself,
   it may expect that it can atomically unblock a thread and
   update other data. */

   bool
   unblock_ordenator (struct list_elem *a, struct list_elem *b, void *aux)
   {
     // Pega a thread a partir do elemento da lista.
     struct thread *thread_a = list_entry (a, struct thread, elem); // Pega a thread a partir do elemento da lista.
     struct thread *thread_b = list_entry (b, struct thread, elem); // Pega a thread a partir do elemento da lista.
   
     return thread_a->priority > thread_b->priority; // Retorna um booleano de acordo com a comparação das prioridades.
   }
   
void thread_unblock(struct thread *t)
{
  enum intr_level old_level;

  ASSERT(is_thread(t));

  old_level = intr_disable();
  ASSERT(t->status == THREAD_BLOCKED);
  
  //list_push_back(&ready_list, &t->elem);
  list_insert_ordered (&ready_list, &t->elem, unblock_ordenator, NULL);

  t->status = THREAD_READY;
  intr_set_level(old_level);
}

/* Returns the name of the running thread. */
const char *
thread_name(void)
{
  return thread_current()->name;
}

/* Returns the running thread.
   This is running_thread() plus a couple of sanity checks.
   See the big comment at the top of thread.h for details. */
struct thread *
thread_current(void)
{
  struct thread *t = running_thread();

  /* Make sure T is really a thread.
     If either of these assertions fire, then your thread may
     have overflowed its stack.  Each thread has less than 4 kB
     of stack, so a few big automatic arrays or moderate
     recursion can cause stack overflow. */
  ASSERT(is_thread(t));
  ASSERT(t->status == THREAD_RUNNING);

  return t;
}

/* Returns the running thread's tid. */
tid_t thread_tid(void)
{
  return thread_current()->tid;
}

/* Deschedules the current thread and destroys it.  Never
   returns to the caller. */
void thread_exit(void)
{
  ASSERT(!intr_context());

#ifdef USERPROG
  process_exit();
#endif

  /* Remove thread from all threads list, set our status to dying,
     and schedule another process.  That process will destroy us
     when it calls thread_schedule_tail(). */
  intr_disable();
  list_remove(&thread_current()->allelem);
  thread_current()->status = THREAD_DYING;
  schedule();
  NOT_REACHED();
}

/* Yields the CPU.  The current thread is not put to sleep and
   may be scheduled again immediately at the scheduler's whim. */
void thread_yield(void)
{
  struct thread *cur = thread_current();
  enum intr_level old_level;

  ASSERT(!intr_context());

  old_level = intr_disable();

  //list_push_back(&ready_list, &cur->elem);
/*
  struct list_elem *elemento; // Indica o elemento atual
  for (elemento = list_begin(&ready_list); elemento != list_end(&ready_list); elemento = list_next(elemento))
  {
    struct thread *thread_lista = list_entry(elemento, struct thread, elem);
    if(cur->priority > thread_lista->priority){
      list_insert(elemento, &cur->elem);
    }
  }
  if (elemento == list_end(&ready_list))
      list_push_back(&ready_list, &cur->elem); // Insere na lista
*/
list_insert_ordered (&ready_list, &cur->elem, unblock_ordenator, NULL);


  cur->status = THREAD_READY;
  schedule();
  intr_set_level(old_level);
}

/* Invoke function 'func' on all threads, passing along 'aux'.
   This function must be called with interrupts off. */
void thread_foreach(thread_action_func *func, void *aux)
{
  struct list_elem *e;

  ASSERT(intr_get_level() == INTR_OFF);

  for (e = list_begin(&all_list); e != list_end(&all_list);
       e = list_next(e))
  {
    struct thread *t = list_entry(e, struct thread, allelem);
    func(t, aux);
  }
}

void set_priority()
{
  struct list_elem *elemento;
  for (elemento = list_begin(&all_list); elemento != list_end(&all_list); elemento = list_next(elemento))
  {
    struct thread *thread_lista = list_entry(elemento, struct thread, elem);

    int new_priority = FLOAT_INT_PART(FLOAT_SUB(FLOAT_CONST(PRI_MAX), FLOAT_SUB(FLOAT_DIV_MIX(thread_lista->cpu_time, 4), FLOAT_MULT_MIX(FLOAT_CONST(thread_lista->nice), 2))));

    thread_lista->priority = new_priority;
    if (thread_lista->priority > PRI_MAX)
      thread_lista->priority = PRI_MAX;
    else if (thread_lista->priority > PRI_MIN)
      thread_lista->priority = PRI_MIN;

  }
}
/*Sets the current thread's priority to NEW_PRIORITY*/
void thread_set_priority(int new_priority)
{
  if(!thread_mlfqs){
    struct thread *t = thread_current();
    t->priority = new_priority;
    thread_yield();
  }
}
/* Returns the current thread's priority. */
int thread_get_priority(void)
{
  return thread_current()->priority;
}
/* Sets the current thread's nice value to NICE. */
void thread_set_nice(int nice UNUSED)
{
  struct thread *t = thread_current();
  t->nice = nice; // Atribuicao do nice

  int priority = nova_Prioridade();

  if(priority > PRI_MAX)
    t->priority = PRI_MAX;
  else if(priority > PRI_MIN)
    t->priority = PRI_MIN;
  else  
    t->priority = priority;

  
  // Garante que a thread atual seja preemptivamente "destruída" (ou seja, perca a CPU) se houver uma thread com prioridade mais alta pronta para ser executada.
  if (!list_empty(&ready_list) && t->priority < list_entry(list_front(&ready_list), struct thread, elem)->priority)
    thread_yield();
}
/* Returns the current thread's nice value. */
int thread_get_nice(void)
{
  return thread_current()->nice;
}
/* Returns 100 times the system load average. */
int thread_get_load_avg(void)
{
  return FLOAT_ROUND(avg) * 100;
}

void thread_set_recent_cpu(void)
{
  struct list_elem *elemento; // Indica o elemento atual
  
  for (elemento = list_begin(&all_list); elemento != list_end(&all_list); elemento = list_next(elemento))
  {
    struct thread *thread_lista = list_entry(elemento, struct thread, elem);
    //thread_lista->cpu_time = FLOAT_MULT(thread_lista->cpu_time, FLOAT_DIV(2*avg, FLOAT_ADD_MIX(2*avg, 1)) + FLOAT_CONST(thread_lista->nice));
    thread_lista->cpu_time = FLOAT_ADD_MIX(FLOAT_MULT(FLOAT_DIV(FLOAT_MULT_MIX(avg, 2), FLOAT_ADD_MIX(FLOAT_MULT_MIX(avg, 2), 1)), thread_lista->cpu_time), thread_lista->nice);


    /*
    float_type doubleAvg = 2 * avg;              //(2*load_avg)   (float * int)
    float_type denominatoFr = FLOAT_ADD_MIX(doubleAvg, 1);        //(2*load_avg + 1) (float + int)
    float_type ratio = FLOAT_DIV(doubleAvg, denominator);        //(2*load_avg)/(2*load_avg + 1) (float/float)
    float_type mult = FLOAT_MULT(ratio, thread_lista->cpu_time); //(2*load_avg)/(2*load_avg + 1) * recent_cpu (float * float)
    float_type result = FLOAT_ADD(mult, FLOAT_CONST(thread_lista->nice)); //(2*load_avg)/(2*load_avg + 1) * recent_cpu + nice (float + int)]
    thread_lista->cpu_time = result;
    */
    
  }
}

/* Returns 100 times the current thread's recent_cpu value. */
int thread_get_recent_cpu(void){

  return FLOAT_ROUND(thread_current()->cpu_time) * 100;
}
/* Idle thread.  Executes when no other thread is ready to run.

   The idle thread is initially put on the ready list by
   thread_start().  It will be scheduled once initially, at which
   point it initializes idle_thread, "up"s the semaphore passed
   to it to enable thread_start() to continue, and immediately
   blocks.  After that, the idle thread never appears in the
   ready list.  It is returned by next_thread_to_run() as a
   special case when the ready list is empty. */
static void
idle(void *idle_started_ UNUSED)
{
  struct semaphore *idle_started = idle_started_;
  idle_thread = thread_current();
  sema_up(idle_started);

  for (;;)
  {
    /* Let someone else run. */
    intr_disable();
    thread_block();

    /* Re-enable interrupts and wait for the next one.

       The `sti' instruction disables interrupts until the
       completion of the next instruction, so these two
       instructions are executed atomically.  This atomicity is
       important; otherwise, an interrupt could be handled
       between re-enabling interrupts and waiting for the next
       one to occur, wasting as much as one clock tick worth of
       time.

       See [IA32-v2a] "HLT", [IA32-v2b] "STI", and [IA32-v3a]
       7.11.1 "HLT Instruction". */
    asm volatile("sti; hlt" : : : "memory");
  }
}

/* Function used as the basis for a kernel thread. */
static void
kernel_thread(thread_func *function, void *aux)
{
  ASSERT(function != NULL);

  intr_enable(); /* The scheduler runs with interrupts off. */
  function(aux); /* Execute the thread function. */
  thread_exit(); /* If function() returns, kill the thread. */
}

/* Returns the running thread. */
struct thread *
running_thread(void)
{
  uint32_t *esp;

  /* Copy the CPU's stack pointer into `esp', and then round that
     down to the start of a page.  Because `struct thread' is
     always at the beginning of a page and the stack pointer is
     somewhere in the middle, this locates the curent thread. */
  asm("mov %%esp, %0" : "=g"(esp));
  return pg_round_down(esp);
}

/* Returns true if T appears to point to a valid thread. */
static bool
is_thread(struct thread *t)
{
  return t != NULL && t->magic == THREAD_MAGIC;
}

/* Does basic initialization of T as a blocked thread named
   NAME. */
static void
init_thread(struct thread *t, const char *name, int priority)
{
  enum intr_level old_level;

  ASSERT(t != NULL);
  ASSERT(PRI_MIN <= priority && priority <= PRI_MAX);
  ASSERT(name != NULL);

  memset(t, 0, sizeof *t);
  t->status = THREAD_BLOCKED;
  strlcpy(t->name, name, sizeof t->name);
  t->stack = (uint8_t *)t + PGSIZE;
  t->priority = priority;
  t->magic = THREAD_MAGIC;
  t->cpu_time = 0;
  t->nice = 0;

  old_level = intr_disable();
  list_push_back(&all_list, &t->allelem);
  intr_set_level(old_level);
}

/* Allocates a SIZE-byte frame at the top of thread T's stack and
   returns a pointer to the frame's base. */
static void *
alloc_frame(struct thread *t, size_t size)
{
  /* Stack data is always allocated in word-size units. */
  ASSERT(is_thread(t));
  ASSERT(size % sizeof(uint32_t) == 0);

  t->stack -= size;
  return t->stack;
}

/* Chooses and returns the next thread to be scheduled.  Should
   return a thread from the run queue, unless the run queue is
   empty.  (If the running thread can continue running, then it
   will be in the run queue.)  If the run queue is empty, return
   idle_thread. */
static struct thread *
next_thread_to_run(void)
{
  if (list_empty(&ready_list)){
    ASSERT(is_thread(idle_thread)); // Garante que idle_thread é válida
    return idle_thread;

  }
  else
    return list_entry(list_pop_front(&ready_list), struct thread, elem);
}

/* Completes a thread switch by activating the new thread's page
   tables, and, if the previous thread is dying, destroying it.

   At this function's invocation, we just switched from thread
   PREV, the new thread is already running, and interrupts are
   still disabled.  This function is normally invoked by
   thread_schedule() as its final action before returning, but
   the first time a thread is scheduled it is called by
   switch_entry() (see switch.S).

   It's not safe to call printf() until the thread switch is
   complete.  In practice that means that printf()s should be
   added at the end of the function.

   After this function and its caller returns, the thread switch
   is complete. */
void thread_schedule_tail(struct thread *prev)
{
  struct thread *cur = running_thread();

  ASSERT(intr_get_level() == INTR_OFF);

  /* Mark us as running. */
  cur->status = THREAD_RUNNING;

  /* Start new time slice. */
  thread_ticks = 0;

#ifdef USERPROG
  /* Activate the new address space. */
  process_activate();
#endif

  /* If the thread we switched from is dying, destroy its struct
     thread.  This must happen late so that thread_exit() doesn't
     pull out the rug under itself.  (We don't free
     initial_thread because its memory was not obtained via
     palloc().) */
  if (prev != NULL && prev->status == THREAD_DYING && prev != initial_thread)
  {
    ASSERT(prev != cur);
    palloc_free_page(prev);
  }
}

/* Schedules a new process.  At entry, interrupts must be off and
   the running process's state must have been changed from
   running to some other state.  This function finds another
   thread to run and switches to it.

   It's not safe to call printf() until thread_schedule_tail()
   has completed. */
static void
schedule(void)
{
  struct thread *cur = running_thread();
  struct thread *next = next_thread_to_run();
  struct thread *prev = NULL;

  ASSERT(intr_get_level() == INTR_OFF);
  ASSERT(cur->status != THREAD_RUNNING);
  ASSERT(is_thread(next));

  if (cur != next)
  {
    prev = switch_threads(cur, next);
  }
  thread_schedule_tail(prev);
}

/* Returns a tid to use for a new thread. */
static tid_t
allocate_tid(void)
{
  static tid_t next_tid = 1;
  tid_t tid;

  lock_acquire(&tid_lock);
  tid = next_tid++;
  lock_release(&tid_lock);

  return tid;
}

/* Offset of `stack' member within `struct thread'.
   Used by switch.S, which can't figure it out on its own. */
uint32_t thread_stack_ofs = offsetof(struct thread, stack);

void thread_dormir(int64_t ticks, struct thread *thread_atual)
{
  if(ticks <= 0)
    return;

  enum intr_level estado_anterior = intr_disable(); // Desabilito as interrupções e guardo numa variavel
  ASSERT(!intr_context());                          // Verifica se não esta em um contexto de interrupção

  if (thread_atual != idle_thread)
  {
    /*A idle_thread é uma thread especial que existe apenas para ocupar a CPU quando não há outras threads prontas para execução.
    Seu objetivo é evitar que a CPU fique completamente inativa, mas ela não deve ser considerada uma carga real no sistema.*/
    thread_atual->momento_de_acordar = ticks; // Define o tempo de acordar como ticks que foi passado como argumento

    struct list_elem *elemento; // Cria uma variavel elemento que guarda um elemento de uma lista
    for (elemento = list_begin(&lista_threads_bloqueadas); elemento != list_end(&lista_threads_bloqueadas); elemento = list_next(elemento))
    {
      /*Percorre cada elemento da lista e insere ele no tempo correto de acordar*/
      struct thread *thread_lista = list_entry(elemento, struct thread, elem); /*Pega o elemento da lista e converte numa thread*/
      if (thread_atual->momento_de_acordar < thread_lista->momento_de_acordar)
      {
        /*Se o momento de acordar da thread atual for menor que o que esta sendo verificado na lista , então insere ele na lista*/
        //list_insert(elemento, &thread_atual->elem);
        list_insert(list_prev(elemento), &thread_atual->elem);
        break;
      }
    }
    // Se ja chegou no elemento final, então signifca que ele ira ficar na ultima posição,pois não ha ninguem com tempo de acordar mais longo que o do elemento
    if (elemento == list_end(&lista_threads_bloqueadas))
      list_push_back(&lista_threads_bloqueadas, &thread_atual->elem); // Insere na lista

    thread_block(); // Bloqueia a thread
  }

  intr_set_level(estado_anterior); // Volta para o estado anterior antes da interrupção
}

void thread_acordar(void)
{
  if (list_empty(&lista_threads_bloqueadas))
    return; /*Se a lista ta vazia então*/

  struct list_elem *thread_atual = list_begin(&lista_threads_bloqueadas);
  /*Pega o elemento atual da lista e guarda em thread atual*/

  /*Enquanto não chega no final da lista*/
  while (thread_atual != list_end(&lista_threads_bloqueadas))
  {
    struct thread *thread_lista = list_entry(thread_atual, struct thread, elem);
    /*Pega o elemento atual da lista e transforma numa thread*/

    /*e ainda não chegou a hora de acordar essa thread, saímos do loop (break),porque a lista
    está ordenada em relação ao tempo de acordar (threads que devem acordar primeiro vem antes na lista).*/
    if (thread_lista->momento_de_acordar > timer_ticks())
      break;

    /*Caso tenha passado pelo if, então guardamos a proxima thread em proxima e a thread atual nos ha removemos da lista*/
    struct list_elem *proxima_thread = list_next(thread_atual);
    list_remove(thread_atual);

    enum intr_level estado_anterior = intr_disable(); // Desabilita as interrupções
    thread_unblock(thread_lista);                     // Desbloqueia a thread
    intr_set_level(estado_anterior);                  // Restaura o estado anterior

    thread_atual = proxima_thread; // Atualiza para tratar a proxima thread
  }
}
void avg_load(void)
{
  int tamanho_lista = list_size(&ready_list); // Tamanho da lista de threas prontas
  if (thread_current() != idle_thread)        // Verifica se a thread atual é diferente da idle_thread.
    tamanho_lista++;

  avg = FLOAT_ADD(FLOAT_MULT(FLOAT_DIV_MIX(FLOAT_CONST(59), 60), avg), FLOAT_MULT_MIX(FLOAT_DIV_MIX(FLOAT_CONST(1), 60), tamanho_lista));
  // Realiza a computação do AVG
}

// Funcao para retornar a nova prioridade da thread atual
int nova_Prioridade(void)
{

  float_type ratio = FLOAT_DIV_MIX(thread_current()->cpu_time, 4);                   // (recent_cpu / 4) // float / int
  float_type doublenice = FLOAT_MULT_MIX(FLOAT_CONST(thread_current()->nice), 2);    // (nice * 2) // float * int
  float_type result = FLOAT_SUB(FLOAT_SUB(FLOAT_CONST(PRI_MAX), ratio), doublenice); // Correção na ordem da subtração
  int nova_prioridade = FLOAT_INT_PART(result);                                      // floor(PriMax - (RecentCpuTime/4) - nice*2) // int

  if (nova_prioridade > PRI_MAX)
    nova_prioridade = PRI_MAX;
  else if (nova_prioridade < PRI_MIN)
    nova_prioridade = PRI_MIN;

  return nova_prioridade;
}
